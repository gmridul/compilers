
Production Rules
(rule precedences determined from %prec or 1st terminal between parentheses):
1: program ->  func_decl_statement_list procedure_list
2: program ->  declaration_statement_list func_decl_statement_list procedure_list
3: program ->  procedure_list
4: procedure_list ->  procedure_list procedure_fun
5: procedure_list ->  procedure_fun
6: procedure_fun ->  declaration_statement_list procedure_name #0001 procedure_body
7: #0001 ->  <empty>
8: procedure_fun ->  procedure_name #0002 procedure_body
9: #0002 ->  <empty>
10: procedure_name (NAME) ->  NAME '(' parameter_statement_list ')'
11: procedure_body ('{') ->  '{' declaration_statement_list #0003 basic_block_list '}'
12: #0003 ->  <empty>
13: procedure_body ('{') ->  '{' basic_block_list '}'
14: declaration_statement_list ->  declaration_statement
15: declaration_statement_list ->  declaration_statement_list declaration_statement
16: func_decl_statement_list ->  func_decl_statement_list function_declaration
17: func_decl_statement_list ->  function_declaration
18: function_declaration (INTEGER) ->  INTEGER NAME '(' parameter_statement_list ')' ';'
19: function_declaration (FLOAT) ->  FLOAT NAME '(' parameter_statement_list ')' ';'
20: function_declaration (VOID) ->  VOID NAME '(' parameter_statement_list ')' ';'
21: parameter_statement_list ->  parameter_statement
22: parameter_statement_list (',') ->  parameter_statement ',' parameter_statement_list
23: parameter_statement (INTEGER) ->  INTEGER NAME
24: parameter_statement (FLOAT) ->  FLOAT NAME
25: parameter_statement ->  <empty>
26: arg_list ->  for_precedence
27: arg_list (',') ->  arg_list ',' for_precedence
28: arg_list ->  <empty>
29: declaration_statement (INTEGER) ->  INTEGER NAME ';'
30: declaration_statement (FLOAT) ->  FLOAT NAME ';'
31: basic_block_list ->  basic_block_list basic_block
32: basic_block_list ->  basic_block
33: basic_block (BASIC_BLOCK) ->  BASIC_BLOCK ':' executable_statement_list
34: executable_statement_list ->  assignment_statement_list
35: executable_statement_list (RETURN) ->  assignment_statement_list RETURN ';'
36: executable_statement_list (RETURN) ->  assignment_statement_list RETURN for_precedence ';'
37: executable_statement_list ->  assignment_statement_list if_statement
38: executable_statement_list ->  assignment_statement_list goto_statement
39: if_statement (IF) ->  IF '(' for_precedence ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';'
40: goto_statement (GOTO) ->  GOTO BASIC_BLOCK ';'
41: relational_expression ->  arithmetic_expression
42: relational_expression (LE) ->  relational_expression LE relational_expression
43: relational_expression (GE) ->  relational_expression GE relational_expression
44: relational_expression (LT) ->  relational_expression LT relational_expression
45: relational_expression (GT) ->  relational_expression GT relational_expression
46: arithmetic_expression ('+') ->  arithmetic_expression '+' arithmetic_expression
47: arithmetic_expression ('-') ->  arithmetic_expression '-' arithmetic_expression
48: arithmetic_expression ('*') ->  arithmetic_expression '*' arithmetic_expression
49: arithmetic_expression ('/') ->  arithmetic_expression '/' arithmetic_expression
50: arithmetic_expression ->  unary_expression
51: arithmetic_expression ('(') ->  '(' for_precedence ')'
52: arithmetic_expression ->  any
53: unary_expression ('-') ->  '-' any
54: unary_expression ('-') ->  '-' '(' for_precedence ')'
55: unary_expression ('(') ->  '(' FLOAT ')' '(' arithmetic_expression ')'
56: unary_expression ('(') ->  '(' DOUBLE ')' '(' arithmetic_expression ')'
57: unary_expression ('(') ->  '(' INTEGER ')' '(' arithmetic_expression ')'
58: unary_expression ('(') ->  '(' FLOAT ')' any
59: unary_expression ('(') ->  '(' DOUBLE ')' any
60: unary_expression ('(') ->  '(' INTEGER ')' any
61: for_precedence ->  relational_expression
62: for_precedence (NE) ->  for_precedence NE for_precedence
63: for_precedence (EQ) ->  for_precedence EQ for_precedence
64: assignment_statement_list ->  <empty>
65: assignment_statement_list ->  assignment_statement_list assignment_statement
66: assignment_statement (ASSIGN_OP) ->  variable ASSIGN_OP for_precedence ';'
67: assignment_statement (NAME) ->  NAME '(' arg_list ')' ';'
68: variable (NAME) ->  NAME
69: variable (NAME) ->  NAME '(' arg_list ')'
70: constant (INTEGER_NUMBER) ->  INTEGER_NUMBER
71: constant (FLOAT_NUMBER) ->  FLOAT_NUMBER
72: any ->  variable
73: any ->  constant
74: program_$ ->  program


Symbolic Terminal tokens:
       error
       EOF
   257: INTEGER_NUMBER
   258: BASIC_BLOCK
   259: FLOAT_NUMBER
   260: NAME
   261: RETURN
   262: INTEGER
   263: FLOAT
   264: DOUBLE
   265: VOID
   266: IF
   267: ELSE
   268: GOTO
   269: ASSIGN_OP
   287: EQ
   288: NE
   289: GT
   290: GE
   291: LT
   292: LE
    43: '+'
    45: '-'
    42: '*'
    47: '/'
    40: '('
    41: ')'
   123: '{'
   125: '}'
    59: ';'
    44: ','
    58: ':'


Grammar States: 
State 0:
74: program_$ ->  . program 
  0:   On program to state 1
  1:   On func_decl_statement_list to state 2
  2:   On declaration_statement_list to state 3
  3:   On procedure_list to state 4
  4:   On function_declaration to state 5
  5:   On declaration_statement to state 6
  6:   On procedure_fun to state 7
  7:   On INTEGER to state 8
  8:   On FLOAT to state 9
  9:   On VOID to state 10
  10:   On procedure_name to state 11
  11:   On NAME to state 12


State 1:
74: program_$ -> program  . 


State 2:
1: program -> func_decl_statement_list  . procedure_list 
16: func_decl_statement_list -> func_decl_statement_list  . function_declaration 
  0:   On procedure_list to state 13
  1:   On function_declaration to state 14
  2:   On procedure_fun to state 7
  3:   On INTEGER to state 8
  4:   On FLOAT to state 9
  5:   On VOID to state 10
  6:   On declaration_statement_list to state 15
  7:   On procedure_name to state 11
  8:   On declaration_statement to state 6
  9:   On NAME to state 12


State 3:
2: program -> declaration_statement_list  . func_decl_statement_list procedure_list 
15: declaration_statement_list -> declaration_statement_list  . declaration_statement 
6: procedure_fun -> declaration_statement_list  . procedure_name #0001 procedure_body 
  0:   On func_decl_statement_list to state 16
  1:   On declaration_statement to state 17
  2:   On procedure_name to state 18
  3:   On function_declaration to state 5
  4:   On INTEGER to state 8
  5:   On FLOAT to state 9
  6:   On NAME to state 12
  7:   On VOID to state 10


State 4:
3: program -> procedure_list  . 
4: procedure_list -> procedure_list  . procedure_fun 
  0:   On procedure_fun to state 19
  1:   On declaration_statement_list to state 15
  2:   On procedure_name to state 11
  3:   On declaration_statement to state 6
  4:   On NAME to state 12
  5:   On INTEGER to state 20
  6:   On FLOAT to state 21
  Reduce by 3: program -> procedure_list  . 


State 5:
17: func_decl_statement_list -> function_declaration  . 
  Reduce by 17: func_decl_statement_list -> function_declaration  . 


State 6:
14: declaration_statement_list -> declaration_statement  . 
  Reduce by 14: declaration_statement_list -> declaration_statement  . 


State 7:
5: procedure_list -> procedure_fun  . 
  Reduce by 5: procedure_list -> procedure_fun  . 


State 8:
18: function_declaration -> INTEGER  . NAME '(' parameter_statement_list ')' ';' 
29: declaration_statement -> INTEGER  . NAME ';' 
  0:   On NAME to state 22


State 9:
19: function_declaration -> FLOAT  . NAME '(' parameter_statement_list ')' ';' 
30: declaration_statement -> FLOAT  . NAME ';' 
  0:   On NAME to state 23


State 10:
20: function_declaration -> VOID  . NAME '(' parameter_statement_list ')' ';' 
  0:   On NAME to state 24


State 11:
8: procedure_fun -> procedure_name  . #0002 procedure_body 
  0:   On #0002 to state 25
  Reduce by 9: #0002 ->  . 


State 12:
10: procedure_name -> NAME  . '(' parameter_statement_list ')' 
  0:   On '(' to state 26


State 13:
1: program -> func_decl_statement_list procedure_list  . 
4: procedure_list -> procedure_list  . procedure_fun 
  0:   On procedure_fun to state 19
  1:   On declaration_statement_list to state 15
  2:   On procedure_name to state 11
  3:   On declaration_statement to state 6
  4:   On NAME to state 12
  5:   On INTEGER to state 20
  6:   On FLOAT to state 21
  Reduce by 1: program -> func_decl_statement_list procedure_list  . 


State 14:
16: func_decl_statement_list -> func_decl_statement_list function_declaration  . 
  Reduce by 16: func_decl_statement_list -> func_decl_statement_list function_declaration  . 


State 15:
6: procedure_fun -> declaration_statement_list  . procedure_name #0001 procedure_body 
15: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On procedure_name to state 18
  1:   On declaration_statement to state 17
  2:   On NAME to state 12
  3:   On INTEGER to state 20
  4:   On FLOAT to state 21


State 16:
2: program -> declaration_statement_list func_decl_statement_list  . procedure_list 
16: func_decl_statement_list -> func_decl_statement_list  . function_declaration 
  0:   On procedure_list to state 27
  1:   On function_declaration to state 14
  2:   On procedure_fun to state 7
  3:   On INTEGER to state 8
  4:   On FLOAT to state 9
  5:   On VOID to state 10
  6:   On declaration_statement_list to state 15
  7:   On procedure_name to state 11
  8:   On declaration_statement to state 6
  9:   On NAME to state 12


State 17:
15: declaration_statement_list -> declaration_statement_list declaration_statement  . 
  Reduce by 15: declaration_statement_list -> declaration_statement_list declaration_statement  . 


State 18:
6: procedure_fun -> declaration_statement_list procedure_name  . #0001 procedure_body 
  0:   On #0001 to state 28
  Reduce by 7: #0001 ->  . 


State 19:
4: procedure_list -> procedure_list procedure_fun  . 
  Reduce by 4: procedure_list -> procedure_list procedure_fun  . 


State 20:
29: declaration_statement -> INTEGER  . NAME ';' 
  0:   On NAME to state 29


State 21:
30: declaration_statement -> FLOAT  . NAME ';' 
  0:   On NAME to state 30


State 22:
18: function_declaration -> INTEGER NAME  . '(' parameter_statement_list ')' ';' 
29: declaration_statement -> INTEGER NAME  . ';' 
  0:   On '(' to state 31
  1:   On ';' to state 32


State 23:
19: function_declaration -> FLOAT NAME  . '(' parameter_statement_list ')' ';' 
30: declaration_statement -> FLOAT NAME  . ';' 
  0:   On '(' to state 33
  1:   On ';' to state 34


State 24:
20: function_declaration -> VOID NAME  . '(' parameter_statement_list ')' ';' 
  0:   On '(' to state 35


State 25:
8: procedure_fun -> procedure_name #0002  . procedure_body 
  0:   On procedure_body to state 36
  1:   On '{' to state 37


State 26:
10: procedure_name -> NAME '('  . parameter_statement_list ')' 
  0:   On parameter_statement_list to state 38
  1:   On parameter_statement to state 39
  2:   On INTEGER to state 40
  3:   On FLOAT to state 41
  Reduce by 25: parameter_statement ->  . 


State 27:
2: program -> declaration_statement_list func_decl_statement_list procedure_list  . 
4: procedure_list -> procedure_list  . procedure_fun 
  0:   On procedure_fun to state 19
  1:   On declaration_statement_list to state 15
  2:   On procedure_name to state 11
  3:   On declaration_statement to state 6
  4:   On NAME to state 12
  5:   On INTEGER to state 20
  6:   On FLOAT to state 21
  Reduce by 2: program -> declaration_statement_list func_decl_statement_list procedure_list  . 


State 28:
6: procedure_fun -> declaration_statement_list procedure_name #0001  . procedure_body 
  0:   On procedure_body to state 42
  1:   On '{' to state 37


State 29:
29: declaration_statement -> INTEGER NAME  . ';' 
  0:   On ';' to state 32


State 30:
30: declaration_statement -> FLOAT NAME  . ';' 
  0:   On ';' to state 34


State 31:
18: function_declaration -> INTEGER NAME '('  . parameter_statement_list ')' ';' 
  0:   On parameter_statement_list to state 43
  1:   On parameter_statement to state 39
  2:   On INTEGER to state 40
  3:   On FLOAT to state 41
  Reduce by 25: parameter_statement ->  . 


State 32:
29: declaration_statement -> INTEGER NAME ';'  . 
  Reduce by 29: declaration_statement -> INTEGER NAME ';'  . 


State 33:
19: function_declaration -> FLOAT NAME '('  . parameter_statement_list ')' ';' 
  0:   On parameter_statement_list to state 44
  1:   On parameter_statement to state 39
  2:   On INTEGER to state 40
  3:   On FLOAT to state 41
  Reduce by 25: parameter_statement ->  . 


State 34:
30: declaration_statement -> FLOAT NAME ';'  . 
  Reduce by 30: declaration_statement -> FLOAT NAME ';'  . 


State 35:
20: function_declaration -> VOID NAME '('  . parameter_statement_list ')' ';' 
  0:   On parameter_statement_list to state 45
  1:   On parameter_statement to state 39
  2:   On INTEGER to state 40
  3:   On FLOAT to state 41
  Reduce by 25: parameter_statement ->  . 


State 36:
8: procedure_fun -> procedure_name #0002 procedure_body  . 
  Reduce by 8: procedure_fun -> procedure_name #0002 procedure_body  . 


State 37:
11: procedure_body -> '{'  . declaration_statement_list #0003 basic_block_list '}' 
13: procedure_body -> '{'  . basic_block_list '}' 
  0:   On declaration_statement_list to state 46
  1:   On basic_block_list to state 47
  2:   On declaration_statement to state 6
  3:   On basic_block to state 48
  4:   On INTEGER to state 20
  5:   On FLOAT to state 21
  6:   On BASIC_BLOCK to state 49


State 38:
10: procedure_name -> NAME '(' parameter_statement_list  . ')' 
  0:   On ')' to state 50


State 39:
21: parameter_statement_list -> parameter_statement  . 
22: parameter_statement_list -> parameter_statement  . ',' parameter_statement_list 
  0:   On ',' to state 51
  Reduce by 21: parameter_statement_list -> parameter_statement  . 


State 40:
23: parameter_statement -> INTEGER  . NAME 
  0:   On NAME to state 52


State 41:
24: parameter_statement -> FLOAT  . NAME 
  0:   On NAME to state 53


State 42:
6: procedure_fun -> declaration_statement_list procedure_name #0001 procedure_body  . 
  Reduce by 6: procedure_fun -> declaration_statement_list procedure_name #0001 procedure_body  . 


State 43:
18: function_declaration -> INTEGER NAME '(' parameter_statement_list  . ')' ';' 
  0:   On ')' to state 54


State 44:
19: function_declaration -> FLOAT NAME '(' parameter_statement_list  . ')' ';' 
  0:   On ')' to state 55


State 45:
20: function_declaration -> VOID NAME '(' parameter_statement_list  . ')' ';' 
  0:   On ')' to state 56


State 46:
11: procedure_body -> '{' declaration_statement_list  . #0003 basic_block_list '}' 
15: declaration_statement_list -> declaration_statement_list  . declaration_statement 
  0:   On #0003 to state 57
  1:   On declaration_statement to state 17
  2:   On INTEGER to state 20
  3:   On FLOAT to state 21
  Reduce by 12: #0003 ->  . 


State 47:
13: procedure_body -> '{' basic_block_list  . '}' 
31: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 58
  1:   On basic_block to state 59
  2:   On BASIC_BLOCK to state 49


State 48:
32: basic_block_list -> basic_block  . 
  Reduce by 32: basic_block_list -> basic_block  . 


State 49:
33: basic_block -> BASIC_BLOCK  . ':' executable_statement_list 
  0:   On ':' to state 60


State 50:
10: procedure_name -> NAME '(' parameter_statement_list ')'  . 
  Reduce by 10: procedure_name -> NAME '(' parameter_statement_list ')'  . 


State 51:
22: parameter_statement_list -> parameter_statement ','  . parameter_statement_list 
  0:   On parameter_statement_list to state 61
  1:   On parameter_statement to state 39
  2:   On INTEGER to state 40
  3:   On FLOAT to state 41
  Reduce by 25: parameter_statement ->  . 


State 52:
23: parameter_statement -> INTEGER NAME  . 
  Reduce by 23: parameter_statement -> INTEGER NAME  . 


State 53:
24: parameter_statement -> FLOAT NAME  . 
  Reduce by 24: parameter_statement -> FLOAT NAME  . 


State 54:
18: function_declaration -> INTEGER NAME '(' parameter_statement_list ')'  . ';' 
  0:   On ';' to state 62


State 55:
19: function_declaration -> FLOAT NAME '(' parameter_statement_list ')'  . ';' 
  0:   On ';' to state 63


State 56:
20: function_declaration -> VOID NAME '(' parameter_statement_list ')'  . ';' 
  0:   On ';' to state 64


State 57:
11: procedure_body -> '{' declaration_statement_list #0003  . basic_block_list '}' 
  0:   On basic_block_list to state 65
  1:   On basic_block to state 48
  2:   On BASIC_BLOCK to state 49


State 58:
13: procedure_body -> '{' basic_block_list '}'  . 
  Reduce by 13: procedure_body -> '{' basic_block_list '}'  . 


State 59:
31: basic_block_list -> basic_block_list basic_block  . 
  Reduce by 31: basic_block_list -> basic_block_list basic_block  . 


State 60:
33: basic_block -> BASIC_BLOCK ':'  . executable_statement_list 
  0:   On executable_statement_list to state 66
  1:   On assignment_statement_list to state 67
  Reduce by 64: assignment_statement_list ->  . 


State 61:
22: parameter_statement_list -> parameter_statement ',' parameter_statement_list  . 
  Reduce by 22: parameter_statement_list -> parameter_statement ',' parameter_statement_list  . 


State 62:
18: function_declaration -> INTEGER NAME '(' parameter_statement_list ')' ';'  . 
  Reduce by 18: function_declaration -> INTEGER NAME '(' parameter_statement_list ')' ';'  . 


State 63:
19: function_declaration -> FLOAT NAME '(' parameter_statement_list ')' ';'  . 
  Reduce by 19: function_declaration -> FLOAT NAME '(' parameter_statement_list ')' ';'  . 


State 64:
20: function_declaration -> VOID NAME '(' parameter_statement_list ')' ';'  . 
  Reduce by 20: function_declaration -> VOID NAME '(' parameter_statement_list ')' ';'  . 


State 65:
11: procedure_body -> '{' declaration_statement_list #0003 basic_block_list  . '}' 
31: basic_block_list -> basic_block_list  . basic_block 
  0:   On '}' to state 68
  1:   On basic_block to state 59
  2:   On BASIC_BLOCK to state 49


State 66:
33: basic_block -> BASIC_BLOCK ':' executable_statement_list  . 
  Reduce by 33: basic_block -> BASIC_BLOCK ':' executable_statement_list  . 


State 67:
34: executable_statement_list -> assignment_statement_list  . 
35: executable_statement_list -> assignment_statement_list  . RETURN ';' 
36: executable_statement_list -> assignment_statement_list  . RETURN for_precedence ';' 
37: executable_statement_list -> assignment_statement_list  . if_statement 
38: executable_statement_list -> assignment_statement_list  . goto_statement 
65: assignment_statement_list -> assignment_statement_list  . assignment_statement 
  0:   On RETURN to state 69
  1:   On if_statement to state 70
  2:   On goto_statement to state 71
  3:   On assignment_statement to state 72
  4:   On IF to state 73
  5:   On GOTO to state 74
  6:   On variable to state 75
  7:   On NAME to state 76
  Reduce by 34: executable_statement_list -> assignment_statement_list  . 


State 68:
11: procedure_body -> '{' declaration_statement_list #0003 basic_block_list '}'  . 
  Reduce by 11: procedure_body -> '{' declaration_statement_list #0003 basic_block_list '}'  . 


State 69:
35: executable_statement_list -> assignment_statement_list RETURN  . ';' 
36: executable_statement_list -> assignment_statement_list RETURN  . for_precedence ';' 
  0:   On ';' to state 77
  1:   On for_precedence to state 78
  2:   On relational_expression to state 79
  3:   On arithmetic_expression to state 80
  4:   On unary_expression to state 81
  5:   On '(' to state 82
  6:   On any to state 83
  7:   On '-' to state 84
  8:   On variable to state 85
  9:   On constant to state 86
  10:   On NAME to state 87
  11:   On INTEGER_NUMBER to state 88
  12:   On FLOAT_NUMBER to state 89


State 70:
37: executable_statement_list -> assignment_statement_list if_statement  . 
  Reduce by 37: executable_statement_list -> assignment_statement_list if_statement  . 


State 71:
38: executable_statement_list -> assignment_statement_list goto_statement  . 
  Reduce by 38: executable_statement_list -> assignment_statement_list goto_statement  . 


State 72:
65: assignment_statement_list -> assignment_statement_list assignment_statement  . 
  Reduce by 65: assignment_statement_list -> assignment_statement_list assignment_statement  . 


State 73:
39: if_statement -> IF  . '(' for_precedence ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On '(' to state 90


State 74:
40: goto_statement -> GOTO  . BASIC_BLOCK ';' 
  0:   On BASIC_BLOCK to state 91


State 75:
66: assignment_statement -> variable  . ASSIGN_OP for_precedence ';' 
  0:   On ASSIGN_OP to state 92


State 76:
67: assignment_statement -> NAME  . '(' arg_list ')' ';' 
68: variable -> NAME  . 
69: variable -> NAME  . '(' arg_list ')' 
  0:   On '(' to state 93
  Reduce by 68: variable -> NAME  . 


State 77:
35: executable_statement_list -> assignment_statement_list RETURN ';'  . 
  Reduce by 35: executable_statement_list -> assignment_statement_list RETURN ';'  . 


State 78:
36: executable_statement_list -> assignment_statement_list RETURN for_precedence  . ';' 
62: for_precedence -> for_precedence  . NE for_precedence 
63: for_precedence -> for_precedence  . EQ for_precedence 
  0:   On ';' to state 94
  1:   On NE to state 95
  2:   On EQ to state 96


State 79:
61: for_precedence -> relational_expression  . 
42: relational_expression -> relational_expression  . LE relational_expression 
43: relational_expression -> relational_expression  . GE relational_expression 
44: relational_expression -> relational_expression  . LT relational_expression 
45: relational_expression -> relational_expression  . GT relational_expression 
  0:   On LE to state 97
  1:   On GE to state 98
  2:   On LT to state 99
  3:   On GT to state 100
  Reduce by 61: for_precedence -> relational_expression  . 


State 80:
41: relational_expression -> arithmetic_expression  . 
46: arithmetic_expression -> arithmetic_expression  . '+' arithmetic_expression 
47: arithmetic_expression -> arithmetic_expression  . '-' arithmetic_expression 
48: arithmetic_expression -> arithmetic_expression  . '*' arithmetic_expression 
49: arithmetic_expression -> arithmetic_expression  . '/' arithmetic_expression 
  0:   On '+' to state 101
  1:   On '-' to state 102
  2:   On '*' to state 103
  3:   On '/' to state 104
  Reduce by 41: relational_expression -> arithmetic_expression  . 


State 81:
50: arithmetic_expression -> unary_expression  . 
  Reduce by 50: arithmetic_expression -> unary_expression  . 


State 82:
51: arithmetic_expression -> '('  . for_precedence ')' 
55: unary_expression -> '('  . FLOAT ')' '(' arithmetic_expression ')' 
56: unary_expression -> '('  . DOUBLE ')' '(' arithmetic_expression ')' 
57: unary_expression -> '('  . INTEGER ')' '(' arithmetic_expression ')' 
58: unary_expression -> '('  . FLOAT ')' any 
59: unary_expression -> '('  . DOUBLE ')' any 
60: unary_expression -> '('  . INTEGER ')' any 
  0:   On for_precedence to state 105
  1:   On FLOAT to state 106
  2:   On DOUBLE to state 107
  3:   On INTEGER to state 108
  4:   On relational_expression to state 79
  5:   On arithmetic_expression to state 80
  6:   On unary_expression to state 81
  7:   On '(' to state 82
  8:   On any to state 83
  9:   On '-' to state 84
  10:   On variable to state 85
  11:   On constant to state 86
  12:   On NAME to state 87
  13:   On INTEGER_NUMBER to state 88
  14:   On FLOAT_NUMBER to state 89


State 83:
52: arithmetic_expression -> any  . 
  Reduce by 52: arithmetic_expression -> any  . 


State 84:
53: unary_expression -> '-'  . any 
54: unary_expression -> '-'  . '(' for_precedence ')' 
  0:   On any to state 109
  1:   On '(' to state 110
  2:   On variable to state 85
  3:   On constant to state 86
  4:   On NAME to state 87
  5:   On INTEGER_NUMBER to state 88
  6:   On FLOAT_NUMBER to state 89


State 85:
72: any -> variable  . 
  Reduce by 72: any -> variable  . 


State 86:
73: any -> constant  . 
  Reduce by 73: any -> constant  . 


State 87:
68: variable -> NAME  . 
69: variable -> NAME  . '(' arg_list ')' 
  0:   On '(' to state 111
  Reduce by 68: variable -> NAME  . 


State 88:
70: constant -> INTEGER_NUMBER  . 
  Reduce by 70: constant -> INTEGER_NUMBER  . 


State 89:
71: constant -> FLOAT_NUMBER  . 
  Reduce by 71: constant -> FLOAT_NUMBER  . 


State 90:
39: if_statement -> IF '('  . for_precedence ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On for_precedence to state 112
  1:   On relational_expression to state 79
  2:   On arithmetic_expression to state 80
  3:   On unary_expression to state 81
  4:   On '(' to state 82
  5:   On any to state 83
  6:   On '-' to state 84
  7:   On variable to state 85
  8:   On constant to state 86
  9:   On NAME to state 87
  10:   On INTEGER_NUMBER to state 88
  11:   On FLOAT_NUMBER to state 89


State 91:
40: goto_statement -> GOTO BASIC_BLOCK  . ';' 
  0:   On ';' to state 113


State 92:
66: assignment_statement -> variable ASSIGN_OP  . for_precedence ';' 
  0:   On for_precedence to state 114
  1:   On relational_expression to state 79
  2:   On arithmetic_expression to state 80
  3:   On unary_expression to state 81
  4:   On '(' to state 82
  5:   On any to state 83
  6:   On '-' to state 84
  7:   On variable to state 85
  8:   On constant to state 86
  9:   On NAME to state 87
  10:   On INTEGER_NUMBER to state 88
  11:   On FLOAT_NUMBER to state 89


State 93:
67: assignment_statement -> NAME '('  . arg_list ')' ';' 
69: variable -> NAME '('  . arg_list ')' 
  0:   On arg_list to state 115
  1:   On for_precedence to state 116
  2:   On relational_expression to state 79
  3:   On arithmetic_expression to state 80
  4:   On unary_expression to state 81
  5:   On '(' to state 82
  6:   On any to state 83
  7:   On '-' to state 84
  8:   On variable to state 85
  9:   On constant to state 86
  10:   On NAME to state 87
  11:   On INTEGER_NUMBER to state 88
  12:   On FLOAT_NUMBER to state 89
  Reduce by 28: arg_list ->  . 


State 94:
36: executable_statement_list -> assignment_statement_list RETURN for_precedence ';'  . 
  Reduce by 36: executable_statement_list -> assignment_statement_list RETURN for_precedence ';'  . 


State 95:
62: for_precedence -> for_precedence NE  . for_precedence 
  0:   On for_precedence to state 117
  1:   On relational_expression to state 79
  2:   On arithmetic_expression to state 80
  3:   On unary_expression to state 81
  4:   On '(' to state 82
  5:   On any to state 83
  6:   On '-' to state 84
  7:   On variable to state 85
  8:   On constant to state 86
  9:   On NAME to state 87
  10:   On INTEGER_NUMBER to state 88
  11:   On FLOAT_NUMBER to state 89


State 96:
63: for_precedence -> for_precedence EQ  . for_precedence 
  0:   On for_precedence to state 118
  1:   On relational_expression to state 79
  2:   On arithmetic_expression to state 80
  3:   On unary_expression to state 81
  4:   On '(' to state 82
  5:   On any to state 83
  6:   On '-' to state 84
  7:   On variable to state 85
  8:   On constant to state 86
  9:   On NAME to state 87
  10:   On INTEGER_NUMBER to state 88
  11:   On FLOAT_NUMBER to state 89


State 97:
42: relational_expression -> relational_expression LE  . relational_expression 
  0:   On relational_expression to state 119
  1:   On arithmetic_expression to state 80
  2:   On unary_expression to state 81
  3:   On '(' to state 82
  4:   On any to state 83
  5:   On '-' to state 84
  6:   On variable to state 85
  7:   On constant to state 86
  8:   On NAME to state 87
  9:   On INTEGER_NUMBER to state 88
  10:   On FLOAT_NUMBER to state 89


State 98:
43: relational_expression -> relational_expression GE  . relational_expression 
  0:   On relational_expression to state 120
  1:   On arithmetic_expression to state 80
  2:   On unary_expression to state 81
  3:   On '(' to state 82
  4:   On any to state 83
  5:   On '-' to state 84
  6:   On variable to state 85
  7:   On constant to state 86
  8:   On NAME to state 87
  9:   On INTEGER_NUMBER to state 88
  10:   On FLOAT_NUMBER to state 89


State 99:
44: relational_expression -> relational_expression LT  . relational_expression 
  0:   On relational_expression to state 121
  1:   On arithmetic_expression to state 80
  2:   On unary_expression to state 81
  3:   On '(' to state 82
  4:   On any to state 83
  5:   On '-' to state 84
  6:   On variable to state 85
  7:   On constant to state 86
  8:   On NAME to state 87
  9:   On INTEGER_NUMBER to state 88
  10:   On FLOAT_NUMBER to state 89


State 100:
45: relational_expression -> relational_expression GT  . relational_expression 
  0:   On relational_expression to state 122
  1:   On arithmetic_expression to state 80
  2:   On unary_expression to state 81
  3:   On '(' to state 82
  4:   On any to state 83
  5:   On '-' to state 84
  6:   On variable to state 85
  7:   On constant to state 86
  8:   On NAME to state 87
  9:   On INTEGER_NUMBER to state 88
  10:   On FLOAT_NUMBER to state 89


State 101:
46: arithmetic_expression -> arithmetic_expression '+'  . arithmetic_expression 
  0:   On arithmetic_expression to state 123
  1:   On unary_expression to state 81
  2:   On '(' to state 82
  3:   On any to state 83
  4:   On '-' to state 84
  5:   On variable to state 85
  6:   On constant to state 86
  7:   On NAME to state 87
  8:   On INTEGER_NUMBER to state 88
  9:   On FLOAT_NUMBER to state 89


State 102:
47: arithmetic_expression -> arithmetic_expression '-'  . arithmetic_expression 
  0:   On arithmetic_expression to state 124
  1:   On unary_expression to state 81
  2:   On '(' to state 82
  3:   On any to state 83
  4:   On '-' to state 84
  5:   On variable to state 85
  6:   On constant to state 86
  7:   On NAME to state 87
  8:   On INTEGER_NUMBER to state 88
  9:   On FLOAT_NUMBER to state 89


State 103:
48: arithmetic_expression -> arithmetic_expression '*'  . arithmetic_expression 
  0:   On arithmetic_expression to state 125
  1:   On unary_expression to state 81
  2:   On '(' to state 82
  3:   On any to state 83
  4:   On '-' to state 84
  5:   On variable to state 85
  6:   On constant to state 86
  7:   On NAME to state 87
  8:   On INTEGER_NUMBER to state 88
  9:   On FLOAT_NUMBER to state 89


State 104:
49: arithmetic_expression -> arithmetic_expression '/'  . arithmetic_expression 
  0:   On arithmetic_expression to state 126
  1:   On unary_expression to state 81
  2:   On '(' to state 82
  3:   On any to state 83
  4:   On '-' to state 84
  5:   On variable to state 85
  6:   On constant to state 86
  7:   On NAME to state 87
  8:   On INTEGER_NUMBER to state 88
  9:   On FLOAT_NUMBER to state 89


State 105:
51: arithmetic_expression -> '(' for_precedence  . ')' 
62: for_precedence -> for_precedence  . NE for_precedence 
63: for_precedence -> for_precedence  . EQ for_precedence 
  0:   On ')' to state 127
  1:   On NE to state 95
  2:   On EQ to state 96


State 106:
55: unary_expression -> '(' FLOAT  . ')' '(' arithmetic_expression ')' 
58: unary_expression -> '(' FLOAT  . ')' any 
  0:   On ')' to state 128


State 107:
56: unary_expression -> '(' DOUBLE  . ')' '(' arithmetic_expression ')' 
59: unary_expression -> '(' DOUBLE  . ')' any 
  0:   On ')' to state 129


State 108:
57: unary_expression -> '(' INTEGER  . ')' '(' arithmetic_expression ')' 
60: unary_expression -> '(' INTEGER  . ')' any 
  0:   On ')' to state 130


State 109:
53: unary_expression -> '-' any  . 
  Reduce by 53: unary_expression -> '-' any  . 


State 110:
54: unary_expression -> '-' '('  . for_precedence ')' 
  0:   On for_precedence to state 131
  1:   On relational_expression to state 79
  2:   On arithmetic_expression to state 80
  3:   On unary_expression to state 81
  4:   On '(' to state 82
  5:   On any to state 83
  6:   On '-' to state 84
  7:   On variable to state 85
  8:   On constant to state 86
  9:   On NAME to state 87
  10:   On INTEGER_NUMBER to state 88
  11:   On FLOAT_NUMBER to state 89


State 111:
69: variable -> NAME '('  . arg_list ')' 
  0:   On arg_list to state 132
  1:   On for_precedence to state 116
  2:   On relational_expression to state 79
  3:   On arithmetic_expression to state 80
  4:   On unary_expression to state 81
  5:   On '(' to state 82
  6:   On any to state 83
  7:   On '-' to state 84
  8:   On variable to state 85
  9:   On constant to state 86
  10:   On NAME to state 87
  11:   On INTEGER_NUMBER to state 88
  12:   On FLOAT_NUMBER to state 89
  Reduce by 28: arg_list ->  . 


State 112:
39: if_statement -> IF '(' for_precedence  . ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
62: for_precedence -> for_precedence  . NE for_precedence 
63: for_precedence -> for_precedence  . EQ for_precedence 
  0:   On ')' to state 133
  1:   On NE to state 95
  2:   On EQ to state 96


State 113:
40: goto_statement -> GOTO BASIC_BLOCK ';'  . 
  Reduce by 40: goto_statement -> GOTO BASIC_BLOCK ';'  . 


State 114:
66: assignment_statement -> variable ASSIGN_OP for_precedence  . ';' 
62: for_precedence -> for_precedence  . NE for_precedence 
63: for_precedence -> for_precedence  . EQ for_precedence 
  0:   On ';' to state 134
  1:   On NE to state 95
  2:   On EQ to state 96


State 115:
67: assignment_statement -> NAME '(' arg_list  . ')' ';' 
69: variable -> NAME '(' arg_list  . ')' 
27: arg_list -> arg_list  . ',' for_precedence 
  0:   On ')' to state 135
  1:   On ',' to state 136


State 116:
26: arg_list -> for_precedence  . 
62: for_precedence -> for_precedence  . NE for_precedence 
63: for_precedence -> for_precedence  . EQ for_precedence 
  0:   On NE to state 95
  1:   On EQ to state 96
  Reduce by 26: arg_list -> for_precedence  . 


State 117:
62: for_precedence -> for_precedence NE for_precedence  . 
62: for_precedence -> for_precedence  . NE for_precedence 
63: for_precedence -> for_precedence  . EQ for_precedence 
  0 (removed by precedence):   On NE to state 95
  1 (removed by precedence):   On EQ to state 96
  Reduce by 62: for_precedence -> for_precedence NE for_precedence  . 


State 118:
63: for_precedence -> for_precedence EQ for_precedence  . 
62: for_precedence -> for_precedence  . NE for_precedence 
63: for_precedence -> for_precedence  . EQ for_precedence 
  0 (removed by precedence):   On NE to state 95
  1 (removed by precedence):   On EQ to state 96
  Reduce by 63: for_precedence -> for_precedence EQ for_precedence  . 


State 119:
42: relational_expression -> relational_expression LE relational_expression  . 
42: relational_expression -> relational_expression  . LE relational_expression 
43: relational_expression -> relational_expression  . GE relational_expression 
44: relational_expression -> relational_expression  . LT relational_expression 
45: relational_expression -> relational_expression  . GT relational_expression 
  0 (removed by precedence):   On LE to state 97
  1 (removed by precedence):   On GE to state 98
  2 (removed by precedence):   On LT to state 99
  3 (removed by precedence):   On GT to state 100
  Reduce by 42: relational_expression -> relational_expression LE relational_expression  . 


State 120:
43: relational_expression -> relational_expression GE relational_expression  . 
42: relational_expression -> relational_expression  . LE relational_expression 
43: relational_expression -> relational_expression  . GE relational_expression 
44: relational_expression -> relational_expression  . LT relational_expression 
45: relational_expression -> relational_expression  . GT relational_expression 
  0 (removed by precedence):   On LE to state 97
  1 (removed by precedence):   On GE to state 98
  2 (removed by precedence):   On LT to state 99
  3 (removed by precedence):   On GT to state 100
  Reduce by 43: relational_expression -> relational_expression GE relational_expression  . 


State 121:
44: relational_expression -> relational_expression LT relational_expression  . 
42: relational_expression -> relational_expression  . LE relational_expression 
43: relational_expression -> relational_expression  . GE relational_expression 
44: relational_expression -> relational_expression  . LT relational_expression 
45: relational_expression -> relational_expression  . GT relational_expression 
  0 (removed by precedence):   On LE to state 97
  1 (removed by precedence):   On GE to state 98
  2 (removed by precedence):   On LT to state 99
  3 (removed by precedence):   On GT to state 100
  Reduce by 44: relational_expression -> relational_expression LT relational_expression  . 


State 122:
45: relational_expression -> relational_expression GT relational_expression  . 
42: relational_expression -> relational_expression  . LE relational_expression 
43: relational_expression -> relational_expression  . GE relational_expression 
44: relational_expression -> relational_expression  . LT relational_expression 
45: relational_expression -> relational_expression  . GT relational_expression 
  0 (removed by precedence):   On LE to state 97
  1 (removed by precedence):   On GE to state 98
  2 (removed by precedence):   On LT to state 99
  3 (removed by precedence):   On GT to state 100
  Reduce by 45: relational_expression -> relational_expression GT relational_expression  . 


State 123:
46: arithmetic_expression -> arithmetic_expression '+' arithmetic_expression  . 
46: arithmetic_expression -> arithmetic_expression  . '+' arithmetic_expression 
47: arithmetic_expression -> arithmetic_expression  . '-' arithmetic_expression 
48: arithmetic_expression -> arithmetic_expression  . '*' arithmetic_expression 
49: arithmetic_expression -> arithmetic_expression  . '/' arithmetic_expression 
  0 (removed by precedence):   On '+' to state 101
  1 (removed by precedence):   On '-' to state 102
  2:   On '*' to state 103
  3:   On '/' to state 104
  Reduce by 46: arithmetic_expression -> arithmetic_expression '+' arithmetic_expression  . 


State 124:
47: arithmetic_expression -> arithmetic_expression '-' arithmetic_expression  . 
46: arithmetic_expression -> arithmetic_expression  . '+' arithmetic_expression 
47: arithmetic_expression -> arithmetic_expression  . '-' arithmetic_expression 
48: arithmetic_expression -> arithmetic_expression  . '*' arithmetic_expression 
49: arithmetic_expression -> arithmetic_expression  . '/' arithmetic_expression 
  0 (removed by precedence):   On '+' to state 101
  1 (removed by precedence):   On '-' to state 102
  2:   On '*' to state 103
  3:   On '/' to state 104
  Reduce by 47: arithmetic_expression -> arithmetic_expression '-' arithmetic_expression  . 


State 125:
48: arithmetic_expression -> arithmetic_expression '*' arithmetic_expression  . 
46: arithmetic_expression -> arithmetic_expression  . '+' arithmetic_expression 
47: arithmetic_expression -> arithmetic_expression  . '-' arithmetic_expression 
48: arithmetic_expression -> arithmetic_expression  . '*' arithmetic_expression 
49: arithmetic_expression -> arithmetic_expression  . '/' arithmetic_expression 
  0 (removed by precedence):   On '+' to state 101
  1 (removed by precedence):   On '-' to state 102
  2 (removed by precedence):   On '*' to state 103
  3 (removed by precedence):   On '/' to state 104
  Reduce by 48: arithmetic_expression -> arithmetic_expression '*' arithmetic_expression  . 


State 126:
49: arithmetic_expression -> arithmetic_expression '/' arithmetic_expression  . 
46: arithmetic_expression -> arithmetic_expression  . '+' arithmetic_expression 
47: arithmetic_expression -> arithmetic_expression  . '-' arithmetic_expression 
48: arithmetic_expression -> arithmetic_expression  . '*' arithmetic_expression 
49: arithmetic_expression -> arithmetic_expression  . '/' arithmetic_expression 
  0 (removed by precedence):   On '+' to state 101
  1 (removed by precedence):   On '-' to state 102
  2 (removed by precedence):   On '*' to state 103
  3 (removed by precedence):   On '/' to state 104
  Reduce by 49: arithmetic_expression -> arithmetic_expression '/' arithmetic_expression  . 


State 127:
51: arithmetic_expression -> '(' for_precedence ')'  . 
  Reduce by 51: arithmetic_expression -> '(' for_precedence ')'  . 


State 128:
55: unary_expression -> '(' FLOAT ')'  . '(' arithmetic_expression ')' 
58: unary_expression -> '(' FLOAT ')'  . any 
  0:   On '(' to state 137
  1:   On any to state 138
  2:   On variable to state 85
  3:   On constant to state 86
  4:   On NAME to state 87
  5:   On INTEGER_NUMBER to state 88
  6:   On FLOAT_NUMBER to state 89


State 129:
56: unary_expression -> '(' DOUBLE ')'  . '(' arithmetic_expression ')' 
59: unary_expression -> '(' DOUBLE ')'  . any 
  0:   On '(' to state 139
  1:   On any to state 140
  2:   On variable to state 85
  3:   On constant to state 86
  4:   On NAME to state 87
  5:   On INTEGER_NUMBER to state 88
  6:   On FLOAT_NUMBER to state 89


State 130:
57: unary_expression -> '(' INTEGER ')'  . '(' arithmetic_expression ')' 
60: unary_expression -> '(' INTEGER ')'  . any 
  0:   On '(' to state 141
  1:   On any to state 142
  2:   On variable to state 85
  3:   On constant to state 86
  4:   On NAME to state 87
  5:   On INTEGER_NUMBER to state 88
  6:   On FLOAT_NUMBER to state 89


State 131:
54: unary_expression -> '-' '(' for_precedence  . ')' 
62: for_precedence -> for_precedence  . NE for_precedence 
63: for_precedence -> for_precedence  . EQ for_precedence 
  0:   On ')' to state 143
  1:   On NE to state 95
  2:   On EQ to state 96


State 132:
69: variable -> NAME '(' arg_list  . ')' 
27: arg_list -> arg_list  . ',' for_precedence 
  0:   On ')' to state 144
  1:   On ',' to state 136


State 133:
39: if_statement -> IF '(' for_precedence ')'  . GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On GOTO to state 145


State 134:
66: assignment_statement -> variable ASSIGN_OP for_precedence ';'  . 
  Reduce by 66: assignment_statement -> variable ASSIGN_OP for_precedence ';'  . 


State 135:
67: assignment_statement -> NAME '(' arg_list ')'  . ';' 
69: variable -> NAME '(' arg_list ')'  . 
  0:   On ';' to state 146
  Reduce by 69: variable -> NAME '(' arg_list ')'  . 


State 136:
27: arg_list -> arg_list ','  . for_precedence 
  0:   On for_precedence to state 147
  1:   On relational_expression to state 79
  2:   On arithmetic_expression to state 80
  3:   On unary_expression to state 81
  4:   On '(' to state 82
  5:   On any to state 83
  6:   On '-' to state 84
  7:   On variable to state 85
  8:   On constant to state 86
  9:   On NAME to state 87
  10:   On INTEGER_NUMBER to state 88
  11:   On FLOAT_NUMBER to state 89


State 137:
55: unary_expression -> '(' FLOAT ')' '('  . arithmetic_expression ')' 
  0:   On arithmetic_expression to state 148
  1:   On unary_expression to state 81
  2:   On '(' to state 82
  3:   On any to state 83
  4:   On '-' to state 84
  5:   On variable to state 85
  6:   On constant to state 86
  7:   On NAME to state 87
  8:   On INTEGER_NUMBER to state 88
  9:   On FLOAT_NUMBER to state 89


State 138:
58: unary_expression -> '(' FLOAT ')' any  . 
  Reduce by 58: unary_expression -> '(' FLOAT ')' any  . 


State 139:
56: unary_expression -> '(' DOUBLE ')' '('  . arithmetic_expression ')' 
  0:   On arithmetic_expression to state 149
  1:   On unary_expression to state 81
  2:   On '(' to state 82
  3:   On any to state 83
  4:   On '-' to state 84
  5:   On variable to state 85
  6:   On constant to state 86
  7:   On NAME to state 87
  8:   On INTEGER_NUMBER to state 88
  9:   On FLOAT_NUMBER to state 89


State 140:
59: unary_expression -> '(' DOUBLE ')' any  . 
  Reduce by 59: unary_expression -> '(' DOUBLE ')' any  . 


State 141:
57: unary_expression -> '(' INTEGER ')' '('  . arithmetic_expression ')' 
  0:   On arithmetic_expression to state 150
  1:   On unary_expression to state 81
  2:   On '(' to state 82
  3:   On any to state 83
  4:   On '-' to state 84
  5:   On variable to state 85
  6:   On constant to state 86
  7:   On NAME to state 87
  8:   On INTEGER_NUMBER to state 88
  9:   On FLOAT_NUMBER to state 89


State 142:
60: unary_expression -> '(' INTEGER ')' any  . 
  Reduce by 60: unary_expression -> '(' INTEGER ')' any  . 


State 143:
54: unary_expression -> '-' '(' for_precedence ')'  . 
  Reduce by 54: unary_expression -> '-' '(' for_precedence ')'  . 


State 144:
69: variable -> NAME '(' arg_list ')'  . 
  Reduce by 69: variable -> NAME '(' arg_list ')'  . 


State 145:
39: if_statement -> IF '(' for_precedence ')' GOTO  . BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On BASIC_BLOCK to state 151


State 146:
67: assignment_statement -> NAME '(' arg_list ')' ';'  . 
  Reduce by 67: assignment_statement -> NAME '(' arg_list ')' ';'  . 


State 147:
27: arg_list -> arg_list ',' for_precedence  . 
62: for_precedence -> for_precedence  . NE for_precedence 
63: for_precedence -> for_precedence  . EQ for_precedence 
  0:   On NE to state 95
  1:   On EQ to state 96
  Reduce by 27: arg_list -> arg_list ',' for_precedence  . 


State 148:
55: unary_expression -> '(' FLOAT ')' '(' arithmetic_expression  . ')' 
46: arithmetic_expression -> arithmetic_expression  . '+' arithmetic_expression 
47: arithmetic_expression -> arithmetic_expression  . '-' arithmetic_expression 
48: arithmetic_expression -> arithmetic_expression  . '*' arithmetic_expression 
49: arithmetic_expression -> arithmetic_expression  . '/' arithmetic_expression 
  0:   On ')' to state 152
  1:   On '+' to state 101
  2:   On '-' to state 102
  3:   On '*' to state 103
  4:   On '/' to state 104


State 149:
56: unary_expression -> '(' DOUBLE ')' '(' arithmetic_expression  . ')' 
46: arithmetic_expression -> arithmetic_expression  . '+' arithmetic_expression 
47: arithmetic_expression -> arithmetic_expression  . '-' arithmetic_expression 
48: arithmetic_expression -> arithmetic_expression  . '*' arithmetic_expression 
49: arithmetic_expression -> arithmetic_expression  . '/' arithmetic_expression 
  0:   On ')' to state 153
  1:   On '+' to state 101
  2:   On '-' to state 102
  3:   On '*' to state 103
  4:   On '/' to state 104


State 150:
57: unary_expression -> '(' INTEGER ')' '(' arithmetic_expression  . ')' 
46: arithmetic_expression -> arithmetic_expression  . '+' arithmetic_expression 
47: arithmetic_expression -> arithmetic_expression  . '-' arithmetic_expression 
48: arithmetic_expression -> arithmetic_expression  . '*' arithmetic_expression 
49: arithmetic_expression -> arithmetic_expression  . '/' arithmetic_expression 
  0:   On ')' to state 154
  1:   On '+' to state 101
  2:   On '-' to state 102
  3:   On '*' to state 103
  4:   On '/' to state 104


State 151:
39: if_statement -> IF '(' for_precedence ')' GOTO BASIC_BLOCK  . ';' ELSE GOTO BASIC_BLOCK ';' 
  0:   On ';' to state 155


State 152:
55: unary_expression -> '(' FLOAT ')' '(' arithmetic_expression ')'  . 
  Reduce by 55: unary_expression -> '(' FLOAT ')' '(' arithmetic_expression ')'  . 


State 153:
56: unary_expression -> '(' DOUBLE ')' '(' arithmetic_expression ')'  . 
  Reduce by 56: unary_expression -> '(' DOUBLE ')' '(' arithmetic_expression ')'  . 


State 154:
57: unary_expression -> '(' INTEGER ')' '(' arithmetic_expression ')'  . 
  Reduce by 57: unary_expression -> '(' INTEGER ')' '(' arithmetic_expression ')'  . 


State 155:
39: if_statement -> IF '(' for_precedence ')' GOTO BASIC_BLOCK ';'  . ELSE GOTO BASIC_BLOCK ';' 
  0:   On ELSE to state 156


State 156:
39: if_statement -> IF '(' for_precedence ')' GOTO BASIC_BLOCK ';' ELSE  . GOTO BASIC_BLOCK ';' 
  0:   On GOTO to state 157


State 157:
39: if_statement -> IF '(' for_precedence ')' GOTO BASIC_BLOCK ';' ELSE GOTO  . BASIC_BLOCK ';' 
  0:   On BASIC_BLOCK to state 158


State 158:
39: if_statement -> IF '(' for_precedence ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK  . ';' 
  0:   On ';' to state 159


State 159:
39: if_statement -> IF '(' for_precedence ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';'  . 
  Reduce by 39: if_statement -> IF '(' for_precedence ')' GOTO BASIC_BLOCK ';' ELSE GOTO BASIC_BLOCK ';'  . 



